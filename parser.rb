#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.8
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require "lexer"
  require "nodes"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 178)
  # This code will be put as-is in the Parser class.
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code) # Tokenize the code using our lexer
    puts @tokens.inspect if show_tokens
    do_parse # Kickoff the parsing process
  end
  
  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    26,    15,    27,    24,    25,    15,    17,    18,    19,    20,
    21,    22,    23,    26,    75,    27,    24,    25,    15,    17,
    18,    19,    20,    21,    22,    23,    46,    79,    45,    16,
    83,    14,    74,    16,    30,    43,    41,    42,    39,    40,
    35,    36,    37,    38,    14,    26,    16,    27,    24,    25,
    75,    17,    18,    19,    20,    21,    22,    23,    26,    54,
    27,    24,    25,    52,    17,    18,    19,    20,    21,    22,
    23,    26,    49,    27,    24,    25,    14,    17,    18,    19,
    20,    21,    22,    23,    26,    48,    27,    24,    25,    14,
    17,    18,    19,    20,    21,    22,    23,    26,    47,    27,
    24,    25,    14,    17,    18,    19,    20,    21,    22,    23,
    26,    28,    27,    24,    25,    14,    17,    18,    19,    20,
    21,    22,    23,    26,    75,    27,    24,    25,    14,    17,
    18,    19,    20,    21,    22,    23,    26,    92,    27,    24,
    25,    14,    17,    18,    19,    20,    21,    22,    23,    26,
   nil,    27,    24,    25,    14,    17,    18,    19,    20,    21,
    22,    23,    26,   nil,    27,    24,    25,    14,    17,    18,
    19,    20,    21,    22,    23,    26,   nil,    27,    24,    25,
    14,    17,    18,    19,    20,    21,    22,    23,    26,   nil,
    27,    24,    25,    14,    17,    18,    19,    20,    21,    22,
    23,    26,   nil,    27,    24,    25,    14,    17,    18,    19,
    20,    21,    22,    23,    26,   nil,    27,    24,    25,    14,
    17,    18,    19,    20,    21,    22,    23,    26,   nil,    27,
    24,    25,    14,    17,    18,    19,    20,    21,    22,    23,
    26,   nil,    27,    24,    25,    14,    17,    18,    19,    20,
    21,    22,    23,    26,   nil,    27,    24,    25,    14,    17,
    18,    19,    20,    21,    22,    23,    26,   nil,    27,    24,
    25,    14,    17,    18,    19,    20,    21,    22,    23,    26,
   nil,    27,    24,    25,    14,    17,    18,    19,    20,    21,
    22,    23,    26,   nil,    27,    24,    25,    14,    17,    18,
    19,    20,    21,    22,    23,    26,   nil,    27,    24,    25,
    14,    17,    18,    19,    20,    21,    22,    23,    26,   nil,
    27,    24,    25,    14,    17,    18,    19,    20,    21,    22,
    23,    15,    30,    43,    41,    42,    14,    88,   nil,    87,
    89,    30,    43,    41,    42,    39,    40,    30,    43,    14,
    30,    43,    41,    42,    39,    40,    81,   nil,    90,    16,
    30,    43,    41,    42,    39,    40,    35,    36,    37,    38,
    33,    34,    32,    31,    30,    43,    75,    68,    30,    43,
    41,    42,    39,    40,    35,    36,    37,    38,    33,    34,
    32,    31,    75,   nil,    30,    43,    41,    42,    39,    40,
    35,    36,    37,    38,    33,    34,    32,    31,    30,    43,
    41,    42,    39,    40,    35,    36,    37,    38,    33,    34,
    32,    31,    30,    43,    41,    42,    39,    40,    35,    36,
    37,    38,    33,    34,    32,    31,    30,    43,    41,    42,
    39,    40,    35,    36,    37,    38,    33,    34,    32,    31,
    30,    43,    41,    42,    39,    40,    35,    36,    37,    38,
    33,    34,    32,    31,    30,    43,    41,    42,    39,    40,
    35,    36,    37,    38,    33,    34,    32,    31,    30,    43,
    41,    42,    39,    40,    35,    36,    37,    38,    33,    34,
    32,    31,    30,    43,    41,    42,    39,    40,    35,    36,
    37,    38,    33,    34,    32,    30,    43,    41,    42,    39,
    40,    35,    36,    37,    38,    33,    34,    30,    43,    41,
    42,    39,    40,    35,    36,    37,    38,    30,    43,    41,
    42,    39,    40,    30,    43,    41,    42,    39,    40,    30,
    43,    41,    42,    81,   nil,    80,    30,    43 ]

racc_action_check = [
     0,     2,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    75,    48,    75,    75,    75,    75,    75,
    75,    75,    75,    75,    75,    75,    22,    54,    22,     2,
    74,     0,    48,     0,    57,    57,    57,    57,    57,    57,
    57,    57,    57,    57,    75,    81,    75,    81,    81,    81,
    49,    81,    81,    81,    81,    81,    81,    81,    46,    30,
    46,    46,    46,    28,    46,    46,    46,    46,    46,    46,
    46,    14,    25,    14,    14,    14,    81,    14,    14,    14,
    14,    14,    14,    14,    45,    24,    45,    45,    45,    46,
    45,    45,    45,    45,    45,    45,    45,    40,    23,    40,
    40,    40,    14,    40,    40,    40,    40,    40,    40,    40,
    42,     1,    42,    42,    42,    45,    42,    42,    42,    42,
    42,    42,    42,    41,    87,    41,    41,    41,    40,    41,
    41,    41,    41,    41,    41,    41,    26,    88,    26,    26,
    26,    42,    26,    26,    26,    26,    26,    26,    26,    27,
   nil,    27,    27,    27,    41,    27,    27,    27,    27,    27,
    27,    27,    47,   nil,    47,    47,    47,    26,    47,    47,
    47,    47,    47,    47,    47,    29,   nil,    29,    29,    29,
    27,    29,    29,    29,    29,    29,    29,    29,    79,   nil,
    79,    79,    79,    47,    79,    79,    79,    79,    79,    79,
    79,    31,   nil,    31,    31,    31,    29,    31,    31,    31,
    31,    31,    31,    31,    32,   nil,    32,    32,    32,    79,
    32,    32,    32,    32,    32,    32,    32,    33,   nil,    33,
    33,    33,    31,    33,    33,    33,    33,    33,    33,    33,
    34,   nil,    34,    34,    34,    32,    34,    34,    34,    34,
    34,    34,    34,    35,   nil,    35,    35,    35,    33,    35,
    35,    35,    35,    35,    35,    35,    36,   nil,    36,    36,
    36,    34,    36,    36,    36,    36,    36,    36,    36,    37,
   nil,    37,    37,    37,    35,    37,    37,    37,    37,    37,
    37,    37,    38,   nil,    38,    38,    38,    36,    38,    38,
    38,    38,    38,    38,    38,    39,   nil,    39,    39,    39,
    37,    39,    39,    39,    39,    39,    39,    39,    43,   nil,
    43,    43,    43,    38,    43,    43,    43,    43,    43,    43,
    43,    84,    63,    63,    63,    63,    39,    82,   nil,    82,
    84,    59,    59,    59,    59,    59,    59,    67,    67,    43,
    60,    60,    60,    60,    60,    60,    85,   nil,    85,    84,
    44,    44,    44,    44,    44,    44,    44,    44,    44,    44,
    44,    44,    44,    44,    65,    65,    50,    44,    50,    50,
    50,    50,    50,    50,    50,    50,    50,    50,    50,    50,
    50,    50,    51,   nil,    51,    51,    51,    51,    51,    51,
    51,    51,    51,    51,    51,    51,    51,    51,    70,    70,
    70,    70,    70,    70,    70,    70,    70,    70,    70,    70,
    70,    70,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,    86,    86,    86,    86,
    86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
    72,    72,    72,    72,    72,    72,    72,    72,    72,    72,
    72,    72,    72,    72,    53,    53,    53,    53,    53,    53,
    53,    53,    53,    53,    53,    53,    53,    53,    71,    71,
    71,    71,    71,    71,    71,    71,    71,    71,    71,    71,
    71,    71,    55,    55,    55,    55,    55,    55,    55,    55,
    55,    55,    55,    55,    55,    56,    56,    56,    56,    56,
    56,    56,    56,    56,    56,    56,    56,    58,    58,    58,
    58,    58,    58,    58,    58,    58,    58,    62,    62,    62,
    62,    62,    62,    61,    61,    61,    61,    61,    61,    64,
    64,    64,    64,    69,   nil,    69,    66,    66 ]

racc_action_pointer = [
    -2,   111,    -6,   405,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    69,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    -5,    67,    72,    58,   134,   147,    63,   173,
    46,   199,   212,   225,   238,   251,   264,   277,   290,   303,
    95,   121,   108,   316,   343,    82,    56,   160,    -1,    35,
   361,   377,   nil,   447,    -6,   475,   488,    17,   500,   324,
   333,   516,   510,   315,   522,   357,   529,   330,   nil,   511,
   391,   461,   433,   nil,    17,    11,   nil,   nil,   nil,   186,
   nil,    43,   305,   nil,   324,   324,   419,   109,   124,   nil,
   nil,   nil,   nil ]

racc_action_default = [
    -1,   -56,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -12,   -13,   -14,   -15,   -56,   -17,   -18,   -19,   -20,   -21,
   -22,   -23,   -24,   -44,   -56,   -56,   -56,   -56,   -56,    -5,
   -56,   -56,   -56,   -56,   -56,   -56,   -56,   -56,   -56,   -56,
   -56,   -56,   -56,   -56,   -56,   -28,   -56,   -56,   -56,   -56,
   -56,   -56,    93,    -4,   -26,   -31,   -32,   -33,   -34,   -35,
   -36,   -37,   -38,   -39,   -40,   -41,   -42,   -43,   -16,   -56,
   -29,   -45,   -46,   -47,   -49,   -56,   -52,   -53,   -54,   -28,
   -25,   -56,   -56,   -50,   -56,   -56,   -30,   -56,   -56,   -55,
   -27,   -48,   -51 ]

racc_goto_table = [
    29,     2,    44,    73,    76,    77,    78,    69,     1,    82,
   nil,   nil,   nil,   nil,    50,    51,   nil,    53,   nil,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,   nil,    70,    71,    72,   nil,   nil,   nil,   nil,
   nil,    85,    91,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    70,   nil,    86,
   nil,   nil,   nil,   nil,   nil,   nil,    84,   nil,   nil,   nil,
   nil,   nil,    29 ]

racc_goto_check = [
     4,     2,     3,    15,    15,    15,    15,    14,     1,    16,
   nil,   nil,   nil,   nil,     3,     3,   nil,     3,   nil,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,   nil,     3,     3,     3,   nil,   nil,   nil,   nil,
   nil,    14,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,     3,
   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,
   nil,   nil,     4 ]

racc_goto_pointer = [
   nil,     8,     1,   -12,    -2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   -38,   -45,   -65 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 37, :_reduce_1,
  1, 37, :_reduce_2,
  1, 38, :_reduce_3,
  3, 38, :_reduce_4,
  2, 38, :_reduce_5,
  1, 38, :_reduce_6,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  1, 39, :_reduce_none,
  3, 39, :_reduce_16,
  1, 40, :_reduce_none,
  1, 40, :_reduce_none,
  1, 41, :_reduce_19,
  1, 41, :_reduce_20,
  1, 41, :_reduce_21,
  1, 41, :_reduce_22,
  1, 41, :_reduce_23,
  1, 42, :_reduce_24,
  4, 42, :_reduce_25,
  3, 42, :_reduce_26,
  6, 42, :_reduce_27,
  0, 50, :_reduce_28,
  1, 50, :_reduce_29,
  3, 50, :_reduce_30,
  3, 43, :_reduce_31,
  3, 43, :_reduce_32,
  3, 43, :_reduce_33,
  3, 43, :_reduce_34,
  3, 43, :_reduce_35,
  3, 43, :_reduce_36,
  3, 43, :_reduce_37,
  3, 43, :_reduce_38,
  3, 43, :_reduce_39,
  3, 43, :_reduce_40,
  3, 43, :_reduce_41,
  3, 43, :_reduce_42,
  3, 43, :_reduce_43,
  1, 44, :_reduce_44,
  3, 45, :_reduce_45,
  3, 45, :_reduce_46,
  3, 46, :_reduce_47,
  6, 46, :_reduce_48,
  0, 52, :_reduce_49,
  1, 52, :_reduce_50,
  3, 52, :_reduce_51,
  3, 47, :_reduce_52,
  3, 48, :_reduce_53,
  3, 49, :_reduce_54,
  3, 51, :_reduce_55 ]

racc_reduce_n = 56

racc_shift_n = 93

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :WHILE => 4,
  :DEF => 5,
  :CLASS => 6,
  :NEWLINE => 7,
  :NUMBER => 8,
  :STRING => 9,
  :TRUE => 10,
  :FALSE => 11,
  :NIL => 12,
  :IDENTIFIER => 13,
  :CONSTANT => 14,
  :INDENT => 15,
  :DEDENT => 16,
  "." => 17,
  "!" => 18,
  "*" => 19,
  "/" => 20,
  "+" => 21,
  "-" => 22,
  ">" => 23,
  ">=" => 24,
  "<" => 25,
  "<=" => 26,
  "==" => 27,
  "!=" => 28,
  "&&" => 29,
  "||" => 30,
  "=" => 31,
  "," => 32,
  "(" => 33,
  ")" => 34,
  ";" => 35 }

racc_nt_base = 36

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "WHILE",
  "DEF",
  "CLASS",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "TRUE",
  "FALSE",
  "NIL",
  "IDENTIFIER",
  "CONSTANT",
  "INDENT",
  "DEDENT",
  "\".\"",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\">\"",
  "\">=\"",
  "\"<\"",
  "\"<=\"",
  "\"==\"",
  "\"!=\"",
  "\"&&\"",
  "\"||\"",
  "\"=\"",
  "\",\"",
  "\"(\"",
  "\")\"",
  "\";\"",
  "$start",
  "Root",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Call",
  "Operator",
  "Constant",
  "Assign",
  "Def",
  "Class",
  "If",
  "While",
  "ArgList",
  "Block",
  "ParamList" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 51)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 52)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_6(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_16(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 17 omitted

# reduce 18 omitted

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_19(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_20(val, _values, result)
     result = StringNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_21(val, _values, result)
     result = TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_22(val, _values, result)
     result = FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 84)
  def _reduce_23(val, _values, result)
     result = NilNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_24(val, _values, result)
     result = CallNode.new(nil, val[0], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_25(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_26(val, _values, result)
     result = CallNode.new(val[0], val[2], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_27(val, _values, result)
     result = CallNode.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_28(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_29(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_30(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_31(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_32(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_33(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 111)
  def _reduce_34(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_35(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_36(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_37(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_38(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 116)
  def _reduce_39(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_40(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_41(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_42(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 120)
  def _reduce_43(val, _values, result)
     result = CallNode.new(val[1], val[0], [])       
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 124)
  def _reduce_44(val, _values, result)
     result = GetConstantNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_45(val, _values, result)
     result = SetLocalNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 130)
  def _reduce_46(val, _values, result)
     result = SetConstantNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 135)
  def _reduce_47(val, _values, result)
     result = DefNode.new(val[1], [], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_48(val, _values, result)
     result = DefNode.new(val[1], val[3], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_49(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_50(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_51(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_52(val, _values, result)
     result = ClassNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 153)
  def _reduce_53(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_54(val, _values, result)
     result = WhileNode.new(val[1], val[2])  
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 164)
  def _reduce_55(val, _values, result)
     result = val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
